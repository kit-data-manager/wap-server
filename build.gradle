plugins {
    id "org.springframework.boot" version "3.4.5"
    id "io.spring.dependency-management" version "1.1.7"
    id "io.freefair.maven-publish-java" version "6.5.1"
    id "com.github.kt3k.coveralls" version "2.12.0"
    id "org.owasp.dependencycheck" version "7.3.0"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id "net.researchgate.release" version "3.1.0"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id 'java'
    id 'jacoco'
}

apply plugin: 'project-report'

//make sure that git properties plugin does not fail on build without access to the git repo information (zip download etc.)
gitProperties {
    failOnNoGitDirectory = false
}

jar {
    archiveBaseName = 'wap-server'
    // version is defined in file 'gradle.properties'
    archiveVersion = System.getenv('version')
}

repositories {
    mavenLocal()
    mavenCentral()
}


configurations {
   all*.exclude module : 'spring-boot-starter-logging'
}

ext {
    set('javersVersion', "6.8.0")
    set('jenaVersion', "5.4.0")
    set('springBootVersion', "3.4.5")
    set('springDocVersion', "2.5.0")
    set('keycloakVersion', "19.0.0")
    set('junitPlatformVersion', "1.11.4")
    set('junitJupiterVersion', "5.11.4")

    // directory for generated code snippets during tests
    snippetsDir = file("build/generated-snippets")
}

println "Running gradle version: $gradle.gradleVersion"
println "Building ${name} version: ${version}"
println "JDK version: ${JavaVersion.current()}"

sourceCompatibility = '17'
targetCompatibility = '17'

if (System.getProperty('profile') == 'minimal') {
    println 'Using minimal profile for building ' + project.getName()
    apply from: 'gradle/profile-minimal.gradle'
} else {
    println 'Using default profile executing all tests for building ' + project.getName()
    apply from: 'gradle/profile-complete.gradle'
}

sourceSets {
    main {
        resources {
            srcDir '.'
            includes = [
                    'doc/**/*.*',
                    'webcontent/**/*.*',
                    'schemas/**/*.*',
                    'profiles/**/FRAME_*.*'
            ]
        }
    }
}

dependencies {
   // boot starter
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    //implementation "org.springframework.boot:spring-boot-starter-actuator"

    //implementation "org.springframework.security:spring-security-web:5.7.5"
    //implementation "org.springframework.security:spring-security-config:5.7.5"
    implementation "org.thymeleaf:thymeleaf-spring6"


    // cloud support
    //implementation "org.springframework.cloud:spring-cloud-starter-config:3.1.5"
    //implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.4"
   // implementation "org.springframework.cloud:spring-cloud-gateway-mvc:3.1.4"
    //implementation 'de.codecentric:spring-boot-admin-starter-client:2.7.10'

    // springdoc
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"

    //Keycloak
    // implementation "org.keycloak:keycloak-spring-boot-starter:${keycloakVersion}"
    implementation 'com.nimbusds:nimbus-jose-jwt:10.3'
    implementation "io.jsonwebtoken:jjwt-api:0.11.5"
    implementation "io.jsonwebtoken:jjwt-impl:0.11.5"
    implementation "io.jsonwebtoken:jjwt-jackson:0.11.5"

    //Jena
    implementation "org.apache.jena:apache-jena-libs:${jenaVersion}"
    implementation "org.apache.jena:jena-fuseki:${jenaVersion}"
    implementation "org.apache.jena:jena-fuseki-server:${jenaVersion}"

    implementation "org.apache.jena:jena-commonsrdf:${jenaVersion}"
    implementation "org.apache.thrift:libthrift:0.18.1"

    implementation "org.apache.commons:commons-rdf-jsonld-java:0.5.0"
    implementation "com.github.java-json-tools:json-schema-validator:2.2.14"

    implementation "org.apache.commons:commons-collections4:4.1"

     // driver for postgres
    implementation 'org.postgresql:postgresql:42.7.2'
    //driver for h2
    implementation 'com.h2database:h2:2.2.220'

    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:3.0.3"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework:spring-test"
   // testImplementation "org.springframework.security:spring-security-test"

    testImplementation "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
    testImplementation "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "io.rest-assured:spring-mock-mvc"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation ("io.specto:hoverfly-java-junit5:0.20.0") {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }

    //Java 11 Support
    testImplementation "org.mockito:mockito-inline:4.10.0"
    //testImplementation "org.mockito:mockito-core:2.23.4"
    testImplementation "com.sun.xml.bind:jaxb-core:4.0.5"
    testImplementation "com.sun.xml.bind:jaxb-impl:2.3.0.1"
    testImplementation "javax.activation:activation:1.1.1"
    testImplementation "org.javassist:javassist:3.23.1-GA"
    testImplementation "javax.xml.bind:jaxb-api:2.3.1"
}

if (project.hasProperty('release')) {
    println 'Using \'release\' profile for building ' + project.getName()
    apply from: 'gradle/profile-deploy.gradle'
}

test {
    useJUnitPlatform()
 if (!JavaVersion.current().isJava8()) {
        println 'Allow access to private methods...'
        jvmArgs '--illegal-access=permit'
    }
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_16)) {
        println 'Allow access to private methods of package java.util.stream...'
        jvmArgs '--add-opens=java.base/java.util.stream=ALL-UNNAMED'
   }
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }

   environment "spring.config.location", "classpath:/test-config/"
}

tasks.withType(Test).configureEach {
    testLogging {
        events 'started', 'passed'
    }
}

springBoot {
    buildInfo()
}

bootJar {
    println 'Create bootable jar...'
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher'
    }
    launchScript()
}

// task for printing project name.
tasks.register('printProjectName') {
    doLast {
        println "${project.name}"
    }
}
